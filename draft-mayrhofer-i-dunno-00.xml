<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
 <!ENTITY rfc2119 PUBLIC ""
          "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc7830 PUBLIC ""
          "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7830.xml">
<!ENTITY rfc791 PUBLIC ""
          "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.0791.xml">
<!ENTITY rfc1034 PUBLIC ""
          "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY rfc1123 PUBLIC ""
          "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1123.xml">
<!ENTITY rfc1883 PUBLIC ""
          "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1883.xml">
<!ENTITY rfc4291 PUBLIC ""
          "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4291.xml">
<!ENTITY rfc5952 PUBLIC ""
          "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5952.xml">
<!ENTITY rfc6916 PUBLIC ""
          "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6916.xml">
<!ENTITY rfc3629 PUBLIC ""
          "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY rfc5513 PUBLIC ""
          "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5513.xml">
]>

<rfc category="exp" docName="draft-mayrhofer-i-dunno-00"
  ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
  <?rfc toc="yes" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc iprnotified="no" ?>
  <?rfc strict="yes" ?>
  <front>
    <title abbrev="draft-mayrhofer-i-dunno">The Internationalized Deliberately Unreadable Network NOtation (I-DUNNO)</title>

    <author initials="A.M." surname="Mayrhofer"
      fullname="Alexander Mayrhofer">
<!--      <organization>nic.at GmbH</organization> -->
      <address>
<!--    <postal>
     <street>Karlsplatz 1/2/9</street>
     <city>Vienna</city>
     <code>1010</code>
     <country>Austria</country>
    </postal> -->
   <email>alex@i-dunno.at</email>
	<uri>https://i-dunno.at/</uri>
   </address>
   </author>
    <author initials="J.M." surname="Hague"
      fullname="Jim Hague">
      <organization>Sinodun</organization>
      <address>
   <email>jim@sinodun.com</email>
	<uri>https://www.sinodun.com/</uri>
   </address>
   </author>
   <date year="2018"/>
   <area>Operations and Management Area</area>
    <!-- <workgroup></workgroup> -->
    <abstract>
      <t>
	  Domain Names were designed for humans, IP addresses were not. Still, an unruly minority of mankind sticks to invading into
	  the realm of machine to machine communication by reading, writing, misspelling, memorizing, permuting, and confusing IP addresses.
	  This memo underspecifies the Internationalized Deliberately Unreadable Network NOtation ("I-DUNNO") in order to put an end 
	  to these ludicrous attempts.
	  </t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction">
      <t>
        In Section 2.3 of <xref target='RFC0791'/>, the original designers of the Internet Protocol carefully defined names and addresses as separate
        quantities. While they did not explicitly reserve names for human use and addresses for machine use, they did consider the matter indirectly
        as a communal whole in their philosophical statement: "A name indicates what we seek.". This clearly indicates
        that names rather than addresses should be of concern to humans.
      </t>

      <t>
        The specification of Domain Names in <xref target='RFC1034'/>, and indeed the continuing enormous effort put into the DNS system,
        reinforces the view that humans should use names, and leave worrying about addresses to the machines. RFC1034
        mentions "users" several times, and even includes the word "humans", even though it is positioned slightly unfortunately in a
        context of "annoying" and "can wreak havoc" (See Section 5.2.3). Nevertheless, this is a another indication that Domain Names
        are made for human use, while IP addresses are for machine use.
      </t>

      <t>
        Given this, and a long error-strewn history of human attempts to utilise addresses directly, it is obviously desirable that humans
        should not meddle with IP addresses. It was therefore quite logical
        that a human-readable (textual) representation of IP addresses was just very vaguely specified in Section 2.1 of <xref target='RFC1123'/>.
        Subsequently, a directed effort to further discourage human use by making IP addresses confusing was introduced in
        <xref target='RFC1883'/>, and more amazing options for human puzzlement were offered in Section 2.2. of <xref target='RFC4291'/>.
        These noble early attempts to hamper efforts by humans to read, understand or even spell IP addressing schemes were unfortunately severely
        compromised in <xref target='RFC5952'/>.
      </t>

      <t>
        In order to prevent further damage from human meddling with IP addresses, there is a clear need for an address notation that
        permanently prevents humans from reading, modifying or otherwise manipulating IP addresses. To that end, this document specifies the
        "Internationalized Deliberately Unreadable Network NOtation" (I-DUNNO). By ab^H^Hperusing the intricacies, inaccuracies and
        chaotic disorder of what humans are pleased to call a "Cultural Technique" (also known as "Script"), I-DUNNO
        expresses an IP address as a set of Unicode codepoints in a form designed to be resistant to ready comprehension or, heaven forfend,
        mutation of the address.
      </t>

	<t>TODO: Compliance LEvels ("party pooper") - confusables, non printable, DISALLOWED - see below?</t>
	</section>
    <section anchor="terminology" title="Terminology">
      <t> The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
        "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", 
		"NOT RECOMMENDED", "MAY", and
        "OPTIONAL" in this document MAY be interpreted as described
        in <xref target="RFC2119"/>. </t>
	  <t>TODO refer to RFC6919</t>
	  <t> Additionally, the phrase "CAREFULLY CONSIDER" means that implementors 
	  SHALL skim the Abstract before copying the "Examples" section into their code.
	  </t>
	  <t>TODO: Definition for the two notations (the traditional "party pooper" notation, and the "very funny" I-DUNNO compatible notation)</t>
	 </section>
	 <section title='The Notation'>
           <t>
             I-DUNNO leverages <xref target='RFC3629'>UTF-8</xref> to obfuscate IP addresses for humans. UTF-8 uses sequences between 1 and 4
             octets to represent codepoints as follows:
           </t>
           <figure align="center" anchor="UTF8">
             <artwork>
   Char. number range  |        UTF-8 octet sequence          
      (hexadecimal)    |              (binary)                
   --------------------+--------------------------------------
   0000 0000-0000 007F | 0xxxxxxx 
   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
             </artwork>
           </figure>

           <section title='Forming I-DUNNO'>
             <t>
               In order to form an I-DUNNO based on the Legacy Notation of an IP address, the following steps are performed:
               <list style='numbers'>
                 <t>
                   The octets of the IP address are written as a bitstring in Network Byte order.
                 </t>
                 <t>
                   Working from left to right, the bitstring (32 bits for IPv4, 128 bits for IPv6) is used to generate a list of UTF-8 octet sequences.
                   To allocate a single UTF-8 sequence:
                   <list style='letters'>
                     <t>
                       Choose whether to generate a 1, 2, 3 or 4 octet UTF-8 sequence. The choice OUGHT TO be guided by the requirement to generate
                       a satisfactory <xref target='minconf'>Minimum Confusion Level</xref> (Not to be confused with the minimum
                       <xref target='satconf'>Satisfactory Confusion Level</xref>). Refer to the character number range in <xref target='UTF8'/> in
                       order to identify which octet sequence lengths are valid for a given bitstring. For example, a 2 octet UTF-8
                       sequence requires the next 11 bits to have a value in the range 0080-07ff.
                     </t>
                     <t>
                       Allocate bits from the bitstring to fill the vacant positions 'x' in the UTF-8 sequence (see <xref target="UTF8" />) from left to right.
                     </t>
                     <t>
                       1, 2, 3 and 4 octet UTF-8 sequences require 7, 11, 16 and 21 bits respectively from the bitstring. Since the number
                       of combinations of UTF-8 sequences accommodating exactly 32 or 128 bits is limited, in sequences where the number of bits
                       required does not exactly match the number of available bits, the final UTF-8 sequence MUST be padded with additional bits
                       once the available address bits are exhausted. The sequence may therefore require up to 20 bits of padding. The content
                       of the padding SHOULD be chosen to best fulfil the Confusion Level Requirements.
                     </t>
                   </list>
                 </t>
                 <t>
                   Once the bits in the bitstring are exhausted, the conversion is complete. The I-DUNNO representation of the address consists of the
                   Unicode codepoints described by the list of generated UTF-8 sequences, and MAY now be presented to unsuspecting humans.
                 </t>
		 </list>
		 </t>
	   </section>
	   <section title='Deforming I-DUNNO' anchor='deform'>
	     <t>
               This section is intentionally omitted. The machines will know how to do it, and by definition humans SHOULD NOT attempt the process.
             </t>
	   </section>
	</section>
	<section title='I-DUNNO Confusion Level Requirements'>
             <t>A sequence of characters is considered I-DUNNO only when there's enough potential to confuse humans. Therefore, the following levels are defined:</t>
        <section title='Minimum Confusion Level' anchor='minconf'>
             <t>As a minimum, a valid I-DUNNO MUST:
             <list style='bullet'>
                <t>Contain at least one UTF-8 octet sequence with a length greater than one octet.</t>
                <t>Contain at least one character which is DISALLOWED in IDNA2008. No code point left behind! Note that this allows machines to distinguish I-DUNNO from Internationalized Domain Name labels.</t>
             </list>
             I-DUNNOs on this level will at least puzzle most human users with knowledge of the Legacy Notation.
             </t>
        </section>
        <section title='Satisfactory Confusion Level' anchor='satconf'>
             <t>An I-DUNNO with Satisfactory Confusion Level MUST adhere the the Minimum Confusion Level, and additionally contain two of the following:
		<list style='bullet'>
                  <t>At least one non-printable character.</t>
		  <t>Characters from at least two different Scripts.</t>
		  <t>A character from the "Symbol" category.</t>
                </list>
             The Satisfactory Confusion Level will make many human-machine interfaces beep, blink, silently fail or any combination thereof. This is considered sufficient to discourage most humans from deforming I-DUNNO.</t>
        </section>
        <section title='Delightful Confusion Level' anchor='delconf'>
            <t>An I-DUNNO with Delightful Confusion Level MUST adhere to the Satisfactory Confusion Level, and contain additionally at least two of the following:
		<list style='bullet'>
                  <t>Characters from scripts with different directionalities.</t>
                  <t>Character classified as "Confusables".</t>
		  <t>One or more Emojis.</t>
	        </list>
    An I-DUNNO conforming to this level will cause U+1F926 with almost all humans, with the exception of those subscribed to the idna-update mailing list.</t>
	   </section>
        </section>
 	<section title='Example'>
           <t>An I-DUNNO is formed and validated from the Legacy Notation IPv4 address "198.51.100.164" as follows: First, the Legacy Notation is written as a string of 32 bits in Network Byte Order:</t>
<figure>
  <artwork align='center'>
11000110001100110110010010100100
  </artwork>
</figure>
<t>Since I-DUNNO requires at least one UTF-8 octet sequence with a length greater than one octet, we allocate bits in the following form:</t>
<figure>
  <artwork align='center'>
  seq1  |   seq2  |   seq3  |   seq4 
--------+---------+---------+------------
1100011 | 0001100 | 1101100 | 10010100100
  </artwork>
</figure>
<t>This translates into the following codepoints:</t>
<figure>
  <artwork align='center'>
Bit seq.    | Char. number | Character Name
------------+--------------+----------------------
1100011     | U+0063       | LATIN SMALL LETTER C
0001100     | U+000C       | FORM FEED (FF)
1101100     | U+006C       | LATIN SMALL LETTER L
10010100100 | U+04A4       | CYRILLIC CAPITAL LIGATURE EN GHE
  </artwork>
</figure>
<t>
  Note that in many cases, the choice of UTF-8 sequence length is limited by the value of the respective bits (eg. 00000000011 is not a
  valid value for a two-octet UTF-8 sequence).
</t>
<t>
  The resulting string MUST be evaluated against the Confusion Level Requirements before I-DUNNO can be declared. Given the example above:
  <list style='bullets'>
    <t>There is at least one UTF-8 octet sequence with a length greater than 1 (U+04A4).</t>
    <t>There are two IDNA2008 DISALLOWED characters: U+000C (for good reason!) and U+04A4.</t>
    <t>There is one non-printable character (U+000C).</t>
    <t>There are characters from two different Scripts (Latin and Cyrillic).</t>
  </list>
  Therefore, the example above constitutes valid I-DUNNO with a Satisfactory Confusion Level. U+000C particularly seems to have high confusion
  potential in environments where I-DUNNOs would be send to printers.
</t>
        </section>	   
	<section title='IANA Considerations'>
	   <t>Future work might extend I-DUNNO to also represent IP 
           prefixes. In that case, IANA is requested to revoke all
	   IPv4 and IPv6 allocations which cannot be represented as
           a valid I-DUNNO. Note that because of their limited length,
           IPv4 prefixes are much more likely to be affected than IPv6 
           allocations. This might hence foster IPv6 deployment 
           significantly, which in turn creates more potential for I-DUNNOs
           with a satisfactory Confusion Level.
           </t>
           <t>Furthermore, IANA is requested to expand the <xref target='RFC5513'>Internet TLA Registry</xref> to accommodate Seven Letter Acronyms (SLA) for obvious reasons, and register 'I-DUNNO'. Note that while "I-DUNNO" qualifies for that registry, actual I-DUNNOs don't, even if they consist of seven Letters.</t>
	</section>
	<section title="Security Considerations">
          <t>I-DUNNO is not a security algorithm. Quite the contrary, many humans are known to develop a strong feeling of insecurity when confronted with I-DUNNO.</t> 
     <t>In tradition with many other RFCs, this section was written last, when authors ran out of ideas and energy. Hence, the exercise is mostly left to the reader.</t>
	</section>
  </middle>
  <back>
    <references title="Normative References">
                &rfc2119;
		&rfc3629;
	</references>
	<references title="Informative References">
		&rfc791;
		&rfc1034;
		&rfc1123;
		&rfc1883;
		&rfc4291;
		&rfc5952;
		&rfc5513;
	</references>
  </back>
</rfc>
